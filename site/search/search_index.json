{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"frontendRoadmap/","title":"Frontend Developer Roadmap Checklist","text":""},{"location":"frontendRoadmap/#1-web-fundamentals","title":"1. Web Fundamentals","text":"<ul> <li> HTML: structure, semantics, forms</li> <li> CSS: selectors, cascade, positioning, Flexbox, Grid</li> <li> JavaScript basics: variables, types, loops, conditionals, functions</li> </ul>"},{"location":"frontendRoadmap/#2-advanced-javascript","title":"2. Advanced JavaScript","text":"<ul> <li> DOM manipulation and events</li> <li> Asynchronous JS: callbacks, promises, async/await</li> <li> Modules and bundling (ESModules, CommonJS)</li> <li> Closures, <code>this</code>, hoisting</li> <li> Working with browser APIs (fetch, localStorage, history, etc.)</li> </ul>"},{"location":"frontendRoadmap/#3-developer-tools","title":"3. Developer Tools","text":"<ul> <li> Git and GitHub: commits, branches, pull requests</li> <li> Chrome DevTools: debugging, inspection</li> <li> Command line basics and npm</li> <li> Understanding <code>package.json</code></li> </ul>"},{"location":"frontendRoadmap/#4-modern-css","title":"4. Modern CSS","text":"<ul> <li> Preprocessors (Sass / SCSS)</li> <li> CSS methodologies (BEM, Atomic CSS, OOCSS)</li> <li> Utility-first CSS (e.g., TailwindCSS)</li> <li> Responsive design: media queries, mobile-first approach</li> </ul>"},{"location":"frontendRoadmap/#5-react-basics","title":"5. React Basics","text":"<ul> <li> Components, JSX, props, state</li> <li> useState and useEffect hooks</li> <li> Event handling, forms, conditional rendering</li> <li> Lifting state up and prop drilling</li> <li> Component folder structure (e.g., FSD or other architecture)</li> </ul>"},{"location":"frontendRoadmap/#6-advanced-react","title":"6. Advanced React","text":"<ul> <li> useContext, useRef, useMemo, useCallback</li> <li> React Router</li> <li> Custom hooks</li> <li> State management: Redux or Zustand</li> <li> API data fetching with React Query or RTK Query</li> </ul>"},{"location":"frontendRoadmap/#7-testing","title":"7. Testing","text":"<ul> <li> Unit testing (Jest)</li> <li> Component testing (React Testing Library)</li> <li> End-to-end testing (e.g., Cypress)</li> </ul>"},{"location":"frontendRoadmap/#8-build-tools-deployment","title":"8. Build Tools &amp; Deployment","text":"<ul> <li> Webpack / Vite</li> <li> Environment variables and .env files</li> <li> CI/CD pipelines (GitHub Actions, Vercel, Netlify)</li> <li> Performance audits (Lighthouse, Web Vitals)</li> </ul>"},{"location":"frontendRoadmap/#9-patterns-architecture","title":"9. Patterns &amp; Architecture","text":"<ul> <li> Separation of concerns</li> <li> Component reusability and modularity</li> <li> Feature-Sliced Design (FSD)</li> <li> Module aliasing</li> </ul>"},{"location":"frontendRoadmap/#10-advanced-topics","title":"10. Advanced Topics","text":"<ul> <li> SSR / SSG: Next.js or Remix</li> <li> i18n: internationalization and localization</li> <li> Accessibility (a11y)</li> <li> Web security basics (XSS, CSRF)</li> <li> Progressive Web Apps (PWA)</li> </ul>"},{"location":"frontendRoadmap/#11-portfolio-career-growth","title":"11. Portfolio &amp; Career Growth","text":"<ul> <li> At least 3 projects in your portfolio</li> <li> One project using an external API (e.g., weather, translator)</li> <li> One project using a state manager</li> <li> Write clean README files and deploy apps (GitHub Pages / Vercel)</li> <li> Contribute to open source or personal projects</li> </ul>"},{"location":"vim-tips/","title":"Vim tips","text":""},{"location":"vim-tips/#filenavigator","title":"FileNavigator","text":""},{"location":"vim-tips/#scrolling","title":"Scrolling","text":"<p>z+z/z+b/z+t :: current line on center/bottom/top</p>"},{"location":"vim-tips/#navigation","title":"Navigation","text":"<p>fx (Fx) :: Navigation before the next(previous) occurrence of x character tx (Tx) :: Navigation after the next(previous) occurrence of x character ; (,) :: repeat(unrepeat) f/F/t/T command</p>"},{"location":"vim-tips/#mode-switching","title":"Mode switching","text":"<p>ctrl+o: command mode only for one command</p>"},{"location":"vim-tips/#text-casing","title":"Text casing","text":"<p>~ :: invert the case of the character under the cursor g~(e/$/iw/0) :: followed by range inverts symbols gu(e/$/iw/0) :: followed by range lowercases symbols gU(e/$/iw/0) :: followed by range UPPERCASES symbols</p>"},{"location":"vim-tips/#folding","title":"Folding","text":"<ul> <li>zM :: closes all folds</li> <li>zm :: folds nested level by level</li> <li>zR :: open all folds</li> <li>zr :: open level by level</li> <li>zO ::</li> <li>zo ::</li> </ul>"},{"location":"vim-tips/#multicursor","title":"Multicursor","text":"<ul> <li><code>&lt;c-V&gt;</code> - Enter Visual Block mode.</li> <li>Use <code>j</code>/<code>k</code> to select the lines.</li> <li><code>$</code> - Move cursor to last character.</li> <li><code>A</code> - Enter insert mode after last character.</li> <li>Insert desired text.</li> <li><code>&lt;Esc&gt;</code> - Exit insert mode and finish block append.</li> </ul>"},{"location":"vim-tips/#nvim-surround-external-tool","title":"nvim surround (external tool)","text":"<p>The three \"core\" operations of <code>add</code>/<code>delete</code>/<code>change</code> can be done with the keymaps <code>ys{motion}{char}</code>, <code>ds{char}</code>, and <code>cs{target}{replacement}</code>, respectively. For the following examples, <code>*</code> will denote the cursor position:</p> <pre><code>    Old text                    Command         New text\n--------------------------------------------------------------------------------\n    surr*ound_words             ysiw)           (surround_words)\n    *make strings               ys$\"            \"make strings\"\n    [delete ar*ound me!]        ds]             delete around me!\n    remove &lt;b&gt;HTML t*ags&lt;/b&gt;    dst             remove HTML tags\n    'change quot*es'            cs'\"            \"change quotes\"\n    &lt;b&gt;or tag* types&lt;/b&gt;        csth1&lt;CR&gt;       &lt;h1&gt;or tag types&lt;/h1&gt;\n    delete(functi*on calls)     dsf             function calls\n</code></pre>"}]}